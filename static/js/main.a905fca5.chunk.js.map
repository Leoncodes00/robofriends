{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/Cardlist.js","components/Scroll.js","components/ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchField","searchChange","className","type","placeholder","onChange","Card","props","robot","id","name","email","alt","src","Cardlist","robots","map","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","err","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","resp","json","catch","console","log","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCLSC,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,KCSDK,G,iBAbF,SAAAC,GAAU,IAAD,EACQA,EAAMC,MAA1BC,EADY,EACZA,GAAIC,EADQ,EACRA,KAAMC,EADE,EACFA,MAClB,OACE,yBAAKT,UAAU,uDACb,yBAAKU,IAAI,QAAQV,UAAU,QAAQW,IAAG,+BAA0BJ,KAChE,6BACE,4BAAKC,GACL,2BAAIC,OCEGG,EAVE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAOlB,OAAO,6BALEA,EAAOC,KAAI,SAAAR,GAChB,OAAO,kBAAC,EAAD,CAAMA,MAAOA,SCUXS,EAdA,SAAAV,GACb,OACE,yBACEW,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTd,EAAMe,WCcEC,EAvBf,YACE,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDiB,MAAQ,CACXC,UAAU,GAJK,EADrB,+EASoBC,EAAKC,GACrBC,KAAKC,SAAS,CACZJ,UAAU,MAXhB,+BAgBI,OAA4B,IAAxBG,KAAKJ,MAAMC,SACN,wDAEFG,KAAKrB,MAAMe,aAnBtB,GAAmCQ,aCyDpBC,EAnDf,YACE,aAAe,IAAD,8BACZ,+CAmBFC,eAAiB,SAAAC,GACf,EAAKJ,SAAL,eACK,EAAKL,MADV,CAEExB,YAAaiC,EAAMC,OAAOC,UApB5B,EAAKX,MAAQ,CACXT,OAAQ,GACRf,YAAa,IALH,EADhB,iFAUuB,IAAD,OAClBoC,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OACR,EAAKT,SAAS,CACZd,OAAQuB,OAGXE,OAAM,SAAAd,GAAG,OAAIe,QAAQC,IAAIhB,QAlBhC,+BA4BY,IAAD,OACDiB,EAAiBf,KAAKJ,MAAMT,OAAO6B,QAAO,SAAApC,GAC9C,OAAOA,EAAME,KACVmC,cACAC,SAAS,EAAKtB,MAAMxB,YAAY6C,kBAErC,OACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CACEF,YAAa4B,KAAKJ,MAAMxB,YACxBC,aAAc2B,KAAKI,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,OAAQ4B,WA3C9B,GAAyBb,aCFzBiB,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.a905fca5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <input\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"search\"\n      placeholder=\"search robots\"\n      onChange={searchChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport \"tachyons\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  const { id, name, email } = props.robot;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robot\" className=\"robot\" src={`https://robohash.org/${id}`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = ({ robots }) => {\n  const renderCards = () => {\n    return robots.map(robot => {\n      return <Card robot={robot} />;\n    });\n  };\n\n  return <div>{renderCards()}</div>;\n};\n\nexport default Cardlist;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"3px solid black\",\n        height: \"500px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(err, info) {\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n    if (this.state.hasError === true) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./App.css\";\nimport \"tachyons\";\nimport Cardlist from \"./components/Cardlist\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(resp => resp.json())\n      .then(resp =>\n        this.setState({\n          robots: resp\n        })\n      )\n      .catch(err => console.log(err));\n  }\n\n  onSearchChange = event => {\n    this.setState({\n      ...this.state,\n      searchField: event.target.value\n    });\n  };\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.state.searchField.toLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox\n          searchField={this.state.searchField}\n          searchChange={this.onSearchChange}\n        />\n        <Scroll>\n          <ErrorBoundary>\n            <Cardlist robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}